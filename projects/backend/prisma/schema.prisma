generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid()) @db.Uuid
  authId           String   @unique
  subscriber       Boolean  @default(false)
  dateRegistered   DateTime @default(now())
  dateLastLoggedIn DateTime?

  spaces           SpaceUser[]
  userLocations    UserLocation[]
  auditLogs        AuditLog[]
  createdSpaces    Space[]  @relation("created_by_user")

  @@map("users")
}

model Space {
  id               String       @id @default(uuid()) @db.Uuid
  name             String
  slug             String
  dateAdded        DateTime     @default(now())
  dateLastModified DateTime?
  dateLastAccessed DateTime?
  createdBy        String       @db.Uuid
  createdByUser    User         @relation(fields: [createdBy], references: [id], name: "created_by_user")

  spaceUsers       SpaceUser[]
  locations        Location[]

  @@map("spaces")
  @@unique([name, createdBy])
  @@unique([slug, createdBy])
}

model SpaceUser {
  id               String       @id @default(uuid()) @db.Uuid
  spaceId          String       @db.Uuid
  userId           String       @db.Uuid
  role             String
  dateAdded        DateTime     @default(now())
  dateLastModified DateTime?

  space            Space        @relation(fields: [spaceId], references: [id])
  user             User         @relation(fields: [userId], references: [id])

  @@map("space_users")
  @@unique([spaceId, userId])
}

model Location {
  id               String      @id @default(uuid()) @db.Uuid
  spaceId          String      @db.Uuid
  name             String
  slug             String
  address          String?
  whatThreeWords   String?
  photo            String?
  type             String?
  notes            String?
  dateAdded        DateTime    @default(now())
  dateLastModified DateTime?
  dateLastAccessed DateTime?

  space            Space       @relation(fields: [spaceId], references: [id])
  userLocations    UserLocation[]
  boxes            Box[]
  items            Item[]
  rooms            Room[]

  @@map("locations")
  @@unique([slug, spaceId])
  @@unique([name, spaceId])
}

model UserLocation {
  userId     String @db.Uuid
  locationId String @db.Uuid

  user       User     @relation(fields: [userId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@id([userId, locationId])
  @@map("user_locations")
}

model Room {
  id               String   @id @default(uuid()) @db.Uuid
  name             String
  slug             String
  locationId       String   @db.Uuid
  colour           String   // Hex color value (e.g., "#6699cc")
  dateAdded        DateTime @default(now())
  dateLastModified DateTime?
  dateLastAccessed DateTime?

  location         Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([locationId, slug]) // Ensure slugs are unique within a location
  @@unique([locationId, name]) // Ensure names are unique within a location
  @@map("rooms")
}

model Box {
  id               String   @id @default(uuid()) @db.Uuid
  name             String
  slug             String   @unique
  locationId       String   @db.Uuid
  description      String?
  sealed          Boolean  @default(false)
  dateAdded        DateTime @default(now())
  dateLastModified DateTime?
  dateLastAccessed DateTime?

  location         Location @relation(fields: [locationId], references: [id])
  items            Item[]

  @@map("boxes")
}

model Item {
  id               String   @id @default(uuid()) @db.Uuid
  name             String
  slug             String   @unique
  description      String?
  photo            String?
  condition        Int?
  quantity         Int      @default(1)
  value            Decimal?
  boxId            String?  @db.Uuid
  locationId       String?  @db.Uuid
  dateAdded        DateTime @default(now())
  dateLastModified DateTime?
  dateLastAccessed DateTime?

  box              Box?      @relation(fields: [boxId], references: [id])
  location         Location? @relation(fields: [locationId], references: [id])
  tags             ItemTag[]

  @@map("items")
}

model Tag {
  id       String   @id @default(uuid()) @db.Uuid
  name     String   @unique

  itemTags ItemTag[]

  @@map("tags")
}

model ItemTag {
  itemId String @db.Uuid
  tagId  String @db.Uuid

  item   Item   @relation(fields: [itemId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([itemId, tagId])
  @@map("item_tags")
}

model AuditLog {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  tableName  String
  recordId   String   @db.Uuid
  columnName String
  oldValue   String?
  newValue   String?
  changedAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
