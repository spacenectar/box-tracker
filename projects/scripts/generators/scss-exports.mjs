#! /usr/bin/env node

/**
 * This file automatically generates the SCSS variable exports to be used in
 * javascript. At the moment, it only exports colour variables, if other
 * variable types need to be exported, this script will need to be updated.
 */

import { readFileSync, writeFileSync, existsSync, rmSync, mkdirSync } from 'fs';
import chokidar from 'chokidar';
import { join, resolve, dirname } from 'path';
import camelCase from 'camelcase';

// Replaces old CJS __dirname with variable mapped to project root
const __dirname = dirname(resolve('./package.json'));

// Includes and excludes should be relative to the root of the
// 'styles' folder. The 'scss' extension is not required.
export const includes = ['colours'];
const stylesRoot = resolve(__dirname, 'styles');
const outputDir = join(stylesRoot, '/export');

const fileTop = `
@use '../colours' as *;

/**
* This file is used to export variables to be used inside react components.
* This file is auto-generated by the 'scripts/generate-scss-exports.mjs' script.
* DO NOT EDIT THIS FILE. If you want to add a new variable, add it to the
* appropriate file in the 'styles' folder and run 'yarn generate:scss-exports'
* (If you are using devkit then this will happen automatically when you save the file)
*/
`;

const runGenerator = () => {
  // Delete the output directory and recreate it
  if (existsSync(outputDir)) {
    rmSync(outputDir, { recursive: true });
  }
  return includes.forEach((file) => {
    const fullFilePath = resolve(stylesRoot, `${file}.scss`);
    mkdirSync(outputDir);
    if (existsSync(fullFilePath)) {
      const srcContents = readFileSync(fullFilePath, 'utf8');
      // Read the file and return an array of all the lines which start with '$'
      const variables = srcContents
        .split('\n')
        .filter((line) => line.startsWith('$'))
        .map((line) => line.match(/\$[a-z0-9-]+/g)[0])
        .map((variable) => {
          const variableName = camelCase(variable.replace('$', ''), {
            pascalCase: true
          });
          return `  col${variableName}: ${variable};`;
        });

      const output = `${fileTop}\n\n:export {\n${variables.join('\n')}\n}`;

      writeFileSync(join(outputDir, `_${file}.module.scss`), output);
    } else {
      return console.log(`File '${fullFilePath}' does not exist`);
    }
  });
};

(function () {
  // Run the generator once to start with
  runGenerator();
  // If the script is called with '--watch' or '-w'. Watch for changes to the target folder and re-run the script
  if (process.argv.includes('--watch') || process.argv.includes('-w')) {
    chokidar
      .watch(
        includes.map((file) => resolve(stylesRoot, `${file}.scss`)),
        {
          ignoreInitial: true
        }
      )
      .on('ready', () =>
        console.log('Watching for changes to files in registries...')
      )
      .on('all', (event, path) => {
        console.log(event, path);
        runGenerator();
      });
  }
})();
